using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Web.UI;
using System.Web.UI.WebControls;
using Samples.repository;

namespace Samples
{
    public partial class Default : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            BuildGrid();
        }

        private string _orderBy;
        public string OrderBy
        {
            get
            {
                _orderBy = Page.Request.Params.AllKeys.Contains("sort") ? this.Page.Request.Params["sort"] : "FirstName";
                return _orderBy;
            }
            set { _orderBy = value; }
        }

        private bool _sortDesc;
        /// <summary>
        /// 
        /// </summary>
        public bool SortDesc
        {
            get
            {
                var dir = Page.Request.Params.AllKeys.Contains("sortdir") ? this.Page.Request.Params["sortdir"] : "ASC";
                _sortDesc = (dir.Contains("DESC"));
                return _sortDesc;
            }
            set { _sortDesc = value; }
        }


        private int _currentGridPage;
        /// <summary>
        /// We need to know what page the user is on.
        /// </summary>
        public int CurrentGridPage
        {
            get
            {
                var pageNum = Page.Request.Params.AllKeys.Contains("page") ? this.Page.Request.Params["page"] : "1";
                _currentGridPage = Convert.ToInt32(pageNum);
                return _currentGridPage;
            }
            set { _currentGridPage = value; }
        }

        protected void BuildGrid()
        {
            //the url generated looks like the code below.
            //default.aspx?sort=FirstName&sortdir=DESC&page=1
           
            
            string displayName = DisplayName.Text;//The like search value from the form.
            var rowsPerPage = 5; //number of items to show on the grid at a given time
            int totalRows = 0; // this will get changed by the repository call using the out command.

            var repo = new PersonRepository();// like search is implemented in the repository, not here.
            var data = repo.Search(out totalRows,displayName: displayName, currentPage: CurrentGridPage, rowsPerPage: rowsPerPage, sortDesc: SortDesc,
                                   orderBy: OrderBy);
            var columnNames = new List<string>()
                                  {
                                      {"PersonId"},
                                      {"FirstName"},
                                      {"LastName"},
                                      {"DisplayName"}
                                  };

            var wg = new WebGrid(source: data, rowsPerPage: rowsPerPage, canPage: true, canSort: true,
                                 columnNames: columnNames);


            //here is the thing, most grids only count the number of items in the data set and
            //work out the number of pages for you.  
            //We want better for our app, so we are going to create our own links at the bottom of the grid.
            //usually I like to bulid xml, but in this case it's simpler to use string.format and 
            //then add new html into the grid.
            //since our gird will never generate any pages of it's owns since the number of rows always matches the 
            // number of rows to show on the page,... well we don't have to check for that html.

            //first we need to bulid our new querystring.
            // it's a crying shame that QueryString does not appear to have a way to easily add new items.
            var qs = new NameValueCollection(Request.QueryString);
            var t = totalRows / rowsPerPage;

            var sb = new StringBuilder();
            // add one so we don't start with 0
            for (int i = 1; i < t+1; i++)
            {
                if (qs.AllKeys.Contains("page"))
                {
                    qs.Set("page", i.ToString());
                }
                else
                {
                    qs.Add("page", i.ToString());
                }

                var url = ToQueryString(qs);// this will urlencode our namevalue collection
                var link = string.Format("<a href=\"{0}\">{1}</a>", url, i);
                sb.AppendLine(link); 
            }

            //this html exactly matches the code generated by the grid when the number of items in the data set exceeds 
            // the number of items to show on the page. If you add css, you will have to add it here, not in the webgrid constructor/property.
            var test = string.Format("</thead><tfoot><tr><td colspan=\"{0}\">{1} </td></tr></tfoot>", columnNames.Count, sb.ToString());
            
             LiteralGrid1.Text = wg.GetHtml().ToHtmlString();
             //inject our html into the html for the grid, just as if it were generated by webgrid. 
             LiteralGrid1.Text = LiteralGrid1.Text.Replace("</thead>", test);
        }

        protected void ButtonSearch_Click(object sender, EventArgs e)
        {

        }

        private string ToQueryString(NameValueCollection nvc) { return "?" + string.Join("&", Array.ConvertAll(nvc.AllKeys, key => string.Format("{0}={1}", HttpUtility.UrlEncode(key), HttpUtility.UrlEncode(nvc[key])))); } 
    }
}